import itertools
import random
from collections import Counter

import networkx as nx
import numpy
import numpy as np
import pandas as pd
from networkx.algorithms import community
from sklearn.cluster import KMeans
from tqdm import tqdm

from .utils import load_data_pickle, load_data_csv, cal_average_path_length, get_combo_name, get_combos_arr
from .influence_maximization import unweighted_ic, weighted_ic


class ComplexNetwork:
    def __init__(self):
        # 网易云数据
        self.raw_data = load_data_pickle()
        self.network = self.__generate_network()
        # lastfm数据
        # self.raw_data = load_data_csv()
        # self.network = self.__generate_network_lastfm()
        self.communinty_method_map = {
            'girvan_newman': self.get_community_by_girvan_newman,
            'greedy_modularity': self.get_community_by_greedy_modularity,
            'spectral_partition': self.get_community_by_spectral_partition,
        }

    def __generate_network(self):
        data = self.raw_data["result"]
        network = nx.DiGraph(name="WYY")
        nodes = [user["id"] for user in data]
        network.add_nodes_from(nodes)
        for user in tqdm(data):
            follows = user['follows'][:]
            for follow_id in user['follows']:
                if follow_id not in nodes:
                    follows.remove(follow_id)
            edges = itertools.product([user["id"]], follows)
            network.add_edges_from(edges)
        return network

    def __generate_network_lastfm(self):
        df = pd.DataFrame(self.raw_data[1:], columns=self.raw_data[0])
        network = nx.Graph(name='lastfm_asia')
        nodes = list(set(df['node_1']).union(set(df['node_2'])))
        edges = list(zip(df['node_1'], df['node_2']))
        network.add_nodes_from(nodes)
        network.add_edges_from(edges)
        return network

    def retrieve(self):
        self.network = self.__generate_network()  # 重置数据

    def get_network_params(self):
        net_clustering_coefficient = nx.average_clustering(self.network)
        net_coreness = max(nx.core_number(self.network).values())
        average_shortest_path_length = round(cal_average_path_length(nx.shortest_paths.shortest_path(self.network)), 3)
        return {
            'net_clustering_coefficient': round(net_clustering_coefficient, 3),
            'net_coreness': net_coreness,
            'average_shortest_path_length': average_shortest_path_length,
        }

    def generate_graph_data(self):
        graph_data = {}
        nodes = []
        edges = []
        degree_map = nx.degree(self.network)
        name_map = self.raw_data["name_map"]
        for node_id in self.network.nodes:
            temp = {"id": node_id, "node_name": name_map[node_id], "node_degree": degree_map[node_id]}
            # temp = {"id": str(node_id)}
            nodes.append(temp)
        for edge in self.network.edges:
            temp = {"source": str(edge[0]), "target": str(edge[1]), "source_name": name_map[edge[0]],
                    "target_name": name_map[edge[1]]}
            edges.append(temp)

        # print(len(nodes), len(edges))
        graph_data["nodes"] = nodes
        graph_data["edges"] = edges
        return graph_data

    def net_attack(self, method="random", attack_times=1):
        if float(attack_times) < 1:
            attack_times = round(float(attack_times) * len(self.network.nodes))
        elif int(attack_times) >= len(self.network.nodes):
            attack_times = len(self.network.nodes) - 1
        else:
            attack_times = int(attack_times)
        # before_shortest_avg_path = nx.average_shortest_path_length(self.network)
        before_max_connection = len(max(nx.weakly_connected_components(self.network), key=len))

        if method == "random":
            attacked_nodes = random.sample(list(self.network.nodes), attack_times)
        elif method == "intention":
            node_list = self.network.degree
            node_list = sorted(list(node_list), key=lambda x: -x[1])
            # print(node_list)
            attacked_nodes = [i[0] for i in node_list[:attack_times]]
        else:
            raise Exception("Wrong attack operation!")

        # print(attacked_nodes)
        attacked_nodes_list = []
        for each_node in attacked_nodes:
            tmp_dic = {
                "attacked_node_name": self.raw_data["name_map"][each_node],
                "attacked_node_degree": nx.degree(self.network)[each_node]
            }
            attacked_nodes_list.append(tmp_dic)

        self.network.remove_nodes_from(attacked_nodes)

        # after_shortest_avg_path = nx.average_shortest_path_length(self.network)
        after_max_connection = len(max(nx.weakly_connected_components(self.network), key=len))
        return {
            # "before_shortest_avg_path": before_shortest_avg_path,
            # "after_shortest_avg_path": after_shortest_avg_path,
            "attacked_nodes": attacked_nodes_list,
            "connection_ratio": round(after_max_connection / before_max_connection, 3)
        }

    def __find_max_connection(self):
        pass

    def get_node_distribution(self):
        counts = Counter(d for n, d in self.network.degree())
        x_labels = list(range(max(counts) + 1))
        y_labels = [counts.get(i, 0) for i in x_labels]
        return {
            "x_axis_name": "Node Degree",
            "x_axis_label": x_labels,
            "y_axis_name": "Count",
            "graph_data": y_labels,
        }

    def raw_repr(self):
        print(self.raw_data.keys())

    def get_node_params(self, node_id):
        node_clustering_coefficient = nx.clustering(self.network, node_id)
        node_degree = nx.degree(self.network, node_id)
        node_coreness = nx.core_number(self.network)[node_id]
        node_betweenness = nx.betweenness_centrality(self.network)[node_id]
        return {
            'node_clustering_coefficient': round(node_clustering_coefficient, 5),
            'node_degree': node_degree,
            'node_coreness': node_coreness,
            'node_betweenness': round(node_betweenness, 5),
        }

    def get_edge_params(self, edge_key):
        edge_betweenness = nx.edge_betweenness_centrality(self.network)[edge_key]
        return {
            'edge_betweenness': round(edge_betweenness, 5),
        }

    def get_community_by_girvan_newman(self, community_num):
        """
        girvan_newman方法，社区检测
        @params community_num 期望划分成的社区数量，有限制，最小值为len(tuple(sorted(c) for c in next(g1)))
        """
        res = []
        communities_generator = community.girvan_newman(self.network)
        first_com = next(communities_generator)
        if community_num < len(tuple(first_com)):
            return res
        if community_num == len(tuple(first_com)):
            return tuple(sorted(c) for c in first_com)
        for com in itertools.islice(communities_generator, community_num):
            if len(com) == community_num:
                res = tuple(sorted(c) for c in com)
                break
        return res

    def get_community_by_greedy_modularity(self, community_num):
        """
        greedy modularity方法，社区检测
        @params community_num 期望划分成的社区数量
        """
        try:
            communities = community.greedy_modularity_communities(self.network, best_n=community_num)
        except StopIteration:
            communities = community.greedy_modularity_communities(self.network)
        res = []
        for com in communities:
            res.append(list(com))
        return res

    def get_community_by_spectral_partition(self, community_num):
        """
        naive spectral clustering方法 社区检测
        划分n个社区，从第二小的特征值开始，取n个特征值，计算对应的特征向量
        再以它们作为列向量组成矩阵，每一行对应一个节点，将这些节点聚类成n个社区
        """
        adj_matrix = nx.to_numpy_array(self.network)
        deg_matrix = np.sum(adj_matrix, axis=1)
        lap_matrix = np.diag(deg_matrix) - adj_matrix

        eigen_values, eigen_vectors = np.linalg.eig(lap_matrix)
        eigen_matrix = numpy.zeros(shape=(100, community_num))
        for i, eigen_value in enumerate(sorted(eigen_values)[1:community_num+1]):
            pos = list(eigen_values).index(eigen_value)
            v = eigen_vectors.T[pos]  # 列向量
            eigen_matrix.T[i] = v

        kmeans = KMeans(n_clusters=community_num).fit(eigen_matrix)

        labels = sorted(list(zip(kmeans.labels_, range(len(kmeans.labels_)))), key=lambda x: x[0])
        groups = itertools.groupby(labels, key=lambda x: x[0])
        res = []
        node_ids = list(self.network.nodes)
        for key, group in groups:
            res.append([node_ids[item[1]] for item in list(group)])
        return res

    def generate_graph_data_with_community(self, community_num, method_name):
        method = self.communinty_method_map[method_name]
        communities = method(community_num)

        graph_data = {}
        nodes = []
        edges = []
        degree_map = nx.degree(self.network)
        name_map = self.raw_data["name_map"]
        for node_id in self.network.nodes:
            temp = {
                "id": str(node_id),
                "node_name": name_map[node_id],
                "node_degree": degree_map[node_id],
                "comboId": get_combo_name(communities, node_id)
            }
            # temp = {"id": str(node_id)}
            nodes.append(temp)
        for edge in self.network.edges:
            temp = {"source": str(edge[0]), "target": str(edge[1]), "source_name": name_map[edge[0]],
                    "target_name": name_map[edge[1]]}
            edges.append(temp)

        # print(len(nodes), len(edges))
        graph_data["nodes"] = nodes
        graph_data["edges"] = edges
        graph_data["combos"] = get_combos_arr(len(communities))
        return graph_data

    def generate_community_evaluation(self, start_num=2, end_num=10):
        """
        生成对划分的community的质量的评估数据
        对于不同节点的数据集，需要使用不同的start_num和end_num
        100节点的数据集，2, 10
        1000节点的数据集，325,342
        :param start_num: 起始社区数量
        :param end_num: 结束社区数量
        """
        assert start_num > 1

        if len(self.network.nodes) > 500:
            start_num = 325
            end_num = 342

        score = {}
        methods = ['girvan_newman', 'greedy_modularity', 'spectral_partition']
        for method_name in methods:
            score[method_name] = {
                'modularity': [],
                'coverage': [],
                'performance': [],
            }
            method = self.communinty_method_map[method_name]
            for num in range(start_num, end_num + 1):
                communities = method(num)
                modularity_score = community.modularity(self.network, communities)
                coverage, performance = community.partition_quality(self.network, communities)
                score[method_name]['modularity'].append(modularity_score)
                score[method_name]['coverage'].append(coverage)
                score[method_name]['performance'].append(performance)

        # score = {'girvan_newman':
        #              {'modularity': [0.8557722165895333, 0.8751220588950528, 0.8881575747599032, 0.8950826633344424,
        #                              0.8986219036323971, 0.9009527141034602, 0.9041795584554536, 0.9074615865224523,
        #                              0.9077842709576517, 0.9101581060200747, 0.9113983366318844, 0.9125600005986022,
        #                              0.914387610414195, 0.9150694566555294, 0.9143286854303762, 0.913623456258955,
        #                              0.9131296087755194, 0.910411576982217],
        #               'coverage': [0.9990328820116054, 0.9980657640232108, 0.9961315280464217, 0.995164410058027,
        #                            0.9932301740812379, 0.9912959381044487, 0.9903288201160542, 0.9893617021276596,
        #                            0.9874274661508704, 0.9864603481624759, 0.9854932301740812, 0.9845261121856866,
        #                            0.9758220502901354, 0.9748549323017408, 0.9729206963249516, 0.9709864603481625,
        #                            0.9690522243713733, 0.9613152804642167],
        #               'performance': [0.9432692692692692, 0.9525585585585585, 0.9607527527527527, 0.9642222222222222,
        #                               0.9663403403403403, 0.9684384384384385, 0.9704404404404404, 0.9721861861861862,
        #                               0.9736876876876877, 0.9751111111111112, 0.9762582582582583, 0.9773073073073073,
        #                               0.9808888888888889, 0.9817717717717718, 0.9825665665665666, 0.9833233233233233,
        #                               0.9838718718718719, 0.9853873873873874]},
        #          'greedy_modularity': {
        #              'modularity': [0.8557722165895334, 0.8751220588950528, 0.8878489200827561, 0.8947740086572952,
        #                             0.8987360123312211, 0.9023192125377391, 0.9055572806961745, 0.908784125048168,
        #                             0.911157960110591, 0.9123981907224008, 0.9135598546891185, 0.9143183969411378,
        #                             0.914748642854737, 0.9150760038759537, 0.9153659522090314, 0.9155230854992155,
        #                             0.9156577711765161, 0.915777491778561],
        #              'coverage': [0.9990328820116054, 0.9980657640232108, 0.9961315280464217, 0.995164410058027,
        #                           0.9941972920696325, 0.9932301740812379, 0.9912959381044487, 0.9903288201160542,
        #                           0.9893617021276596, 0.988394584139265, 0.9874274661508704, 0.9864603481624759,
        #                           0.9845261121856866, 0.9835589941972921, 0.9825918762088974, 0.9816247582205029,
        #                           0.9806576402321083, 0.9796905222437138],
        #              'performance': [0.9432692692692692, 0.9525585585585585, 0.9605125125125125, 0.9639819819819819,
        #                              0.9664824824824825, 0.9684084084084084, 0.9703463463463463, 0.9723483483483484,
        #                              0.9737717717717718, 0.9749189189189189, 0.9759679679679679, 0.9770590590590591,
        #                              0.978076076076076, 0.9785665665665666, 0.979039039039039, 0.9794694694694694,
        #                              0.9798818818818819, 0.9807387387387387]}}

        x_axis_label = list(range(start_num, end_num + 1))
        legend = [m + e for m, e in list(itertools.product(methods, ['--modularity', '--coverage', '--performance']))]
        graph_data = []
        dotted_style = {
            'type': 'dotted',
        }
        dashed_style = {
            'type': 'dashed',
        }
        color_map = {
            'modularity': 'red',
            'coverage': 'green',
            'performance': 'blue',
        }
        style_map = {
            'girvan_newman': {},
            'greedy_modularity': dotted_style,
            'spectral_partition': dashed_style,
        }
        for method, evaluations in score.items():
            style = style_map[method]
            for key, val in evaluations.items():
                color = {
                    'color': color_map[key],
                }
                graph_data.append({
                    'name': method + '--' + key,
                    'type': 'line',
                    'data': val,
                    'lineStyle': {**style, **color}
                })

        return {
            "x_axis_name": "Community Amount",
            "x_axis_label": x_axis_label,
            "y_axis_name": "Evaluation",
            "legend": legend,
            "graph_data": graph_data,
        }

    def greedy_ic(self, num_of_seed, case='unweighted', epochs=5, p=0.5):
        """
        Influence Maximization 贪心算法
        :param num_of_seed: 待选定的种子节点数量
        :param case: 1-unweighted, 2-weighted
        :param p: 无权重独立级联模型传播概率
        :param epochs: 每轮迭代次数
        :return: 种子节点集合
        """
        seed = []
        result = []
        nodes = list(self.network.nodes)
        ic_func = unweighted_ic if case == 'unweighted' else weighted_ic
        for i in range(num_of_seed):
            best_inf, best_inf_node = 0, 0
            for v in set(nodes) - set(seed):
                # 计算边际影响增益
                inf_score = ic_func(self.network, seed + [v], epochs, p)
                if inf_score > best_inf:
                    best_inf, best_inf_node = inf_score, v
            seed.append(best_inf_node)
            result.append((best_inf_node, best_inf))  # 总增益
        return result

    def heuristic_ic(self, num_of_seed, case='unweighted', epochs=5, p=0.5, heuristic=1):
        """
        Influence Maximization 贪心算法
        :param num_of_seed: 待选定的种子节点数量
        :param case: 1-unweighted, 2-weighted
        :param p: 无权重独立级联模型传播概率
        :param epochs: 每轮迭代模拟的次数
        :param heuristic: 1-degree_centrality, 2-distance_centrality-pagerank, 3-distance_centrality-hits, 4-random
        :return: 种子节点集合
        """
        seed = []
        result = []
        candidates = []
        nodes = list(self.network.nodes)
        ic_func = unweighted_ic if case == 'unweighted' else weighted_ic
        if heuristic == 1:
            # 选择degree最大的节点
            node_list = sorted(list(nx.degree(self.network)), key=lambda x: -x[1])
            candidates = [i[0] for i in node_list[:num_of_seed]]
        elif heuristic == 2:
            # 选择最靠近网络中心的节点，根据pagerank得分排序
            node_list = sorted(nx.pagerank(self.network).items(), key=lambda kv: -kv[1])
            candidates = [i[0] for i in node_list[:num_of_seed]]
        elif heuristic == 3:
            # 选择最靠近网络中心的节点，根据hits的authority得分排序
            h, a = nx.hits(self.network)
            node_list = sorted(a.items(), key=lambda kv: -kv[1])
            candidates = [i[0] for i in node_list[:num_of_seed]]
        else:
            # 随机选择节点
            node_list = random.sample(list(nx.degree(self.network)), num_of_seed)
            candidates = [i[0] for i in node_list]

        for v in candidates:
            # 计算边际影响增益
            inf_score = ic_func(self.network, seed + [v], epochs, p)
            seed.append(v)
            result.append((v, inf_score))  # 总增益
        return result

    def get_influence_comparison_data(self, case, epochs=5, p=0.5):
        num_of_seed = 30
        legend = ['greedy', 'high degree', 'central-pagerank', 'central-hits', 'random']
        x_axis_label = list(range(1, 31))
        if case == 'unweighted':
            title = 'p = ' + str(p)
        else:
            title = 'p = 1/deg(node)'
        # 生成数据
        graph_data = []
        # greedy
        res_greedy = self.greedy_ic(num_of_seed, case=case, epochs=epochs, p=p)
        # heuristic
        res_degree = self.heuristic_ic(num_of_seed, case=case, epochs=epochs, p=p, heuristic=1)
        res_central_p = self.heuristic_ic(num_of_seed, case=case, epochs=epochs, p=p, heuristic=2)
        res_central_h = self.heuristic_ic(num_of_seed, case=case, epochs=epochs, p=p, heuristic=3)
        res_random = self.heuristic_ic(num_of_seed, case=case, epochs=epochs, p=p, heuristic=4)
        # 1-300
        # res_greedy = [(1975829085, 5.4), (3316156150, 10.2), (1812931407, 15.0), (15926812, 19.8), (252479648, 23.2), (1661407643, 25.2), (385114522, 28.2), (529338597, 32.0), (2017789612, 34.2), (1594134739, 33.8), (3233355996, 36.8), (1768820773, 38.8), (3272794780, 42.4), (1488884091, 44.4), (1410731121, 46.6), (3311669699, 47.2), (1744603705, 48.0), (1500824780, 48.4), (1949994149, 50.0), (566354903, 55.4), (1422468308, 55.8), (72116592, 56.4), (3242690639, 59.8), (1397297645, 62.4), (1520111105, 63.0), (1883874611, 66.6), (1731715799, 66.4), (370380512, 70.2), (1944456071, 71.8), (606725181, 74.4), (262637433, 75.2), (1846649498, 80.0), (327616422, 82.2), (1689799061, 85.8), (1748709813, 85.4), (1461907859, 88.8), (299927928, 90.8), (1594722322, 93.0), (1539015950, 93.4), (2028364948, 94.0), (5159052335, 97.0), (1842186397, 98.8), (1592397300, 102.2), (3884943933, 102.0), (354862007, 101.4), (2019462707, 102.2), (310084368, 105.6), (372018458, 105.8), (71373064, 107.6), (116297933, 108.0), (3296989583, 109.0), (1345293674, 110.8), (2121140595, 113.4), (47550884, 116.4), (1699816014, 118.2), (3383463411, 119.0), (354192076, 121.8), (2113081694, 120.2), (1784319047, 121.4), (3949662461, 122.8), (1883542004, 125.4), (1722354175, 127.0), (1827340972, 127.4), (3520432932, 128.6), (448957582, 131.4), (555224719, 131.6), (3897428558, 132.6), (1977987160, 136.6), (1722618036, 135.8), (1306790734, 136.8), (1973837951, 140.4), (3940746433, 140.0), (558023041, 140.8), (283821097, 143.8), (4947284394, 144.2), (1984924579, 145.8), (1740048417, 149.0), (3574532646, 148.2), (3276530681, 150.2), (449122372, 149.4), (3352364759, 152.8), (1307182197, 152.8), (2067795122, 154.6), (484740552, 157.2), (323355097, 158.0), (1784483994, 160.6), (442305939, 162.0), (1362039058, 160.6), (445286761, 163.4), (1386942346, 164.8), (1566281520, 167.4), (1515624502, 171.2), (1578209790, 172.4), (2128384126, 171.0), (121375549, 173.8), (470123745, 175.0), (3223226528, 179.2), (1365772823, 179.0), (1573916545, 179.0), (1927684310, 180.2), (2084884687, 185.0), (1814007827, 184.8), (564446265, 184.2), (1421250976, 186.0), (3934392264, 189.2), (1875741769, 189.4), (1357058380, 190.2), (3874066768, 193.2), (1469745848, 194.4), (3291253841, 193.4), (1861322963, 195.4), (594166898, 195.6), (472519091, 197.0), (1675052146, 199.0), (440829705, 203.8), (1373560380, 202.0), (5049815262, 206.4), (2074510271, 208.0), (59576688, 208.6), (295191058, 209.6), (56265687, 212.0), (108872542, 213.0), (3813434692, 214.2), (1527825259, 214.6), (3231638698, 216.4), (598478898, 221.2), (341149154, 220.2), (3217590394, 221.8), (1719501965, 223.8), (1605569793, 223.4), (1635717596, 224.0), (3916860117, 225.4), (1499005608, 227.0), (248580359, 227.6), (1620009639, 228.8), (5202546236, 230.2), (318464617, 235.8), (1686573000, 234.4), (1296031840, 234.6), (137104380, 236.6), (3352398202, 239.0), (133861552, 240.0), (1927972197, 239.0), (306973347, 242.0), (337514225, 242.8), (276792859, 242.2), (4026405349, 244.2), (3413608972, 245.4), (1504480170, 248.6), (444401493, 247.4), (326111158, 249.4), (1455919068, 250.0), (380080040, 251.8), (630296184, 254.6), (1358832416, 254.0), (375884917, 255.2), (532562597, 255.4), (357665312, 257.0), (2142309432, 261.8), (3328968612, 260.0), (1699057087, 260.2), (2133664226, 262.0), (1405815415, 263.6), (5057415990, 266.4), (3924528694, 266.2), (1298178340, 267.4), (3896673152, 271.2), (424808273, 270.0), (2003895361, 270.4), (1409158018, 272.6), (370642757, 273.4), (1614078682, 272.2), (2124023363, 274.8), (367954404, 274.8), (532089776, 278.6), (1578962950, 276.2), (2018968395, 281.4), (371854138, 281.6), (3683223618, 283.8), (1838157815, 284.8), (2015717757, 287.0), (308186298, 288.0), (480513442, 289.6), (505974743, 288.8), (3682044827, 292.4), (1599456560, 292.8), (3682701648, 292.8), (272253388, 293.8), (1900120543, 297.4), (1330351710, 297.4), (539955587, 298.6), (363204123, 298.2), (1705044396, 302.6), (44697415, 303.4), (2116256909, 305.6), (445286042, 306.0), (568527962, 306.8), (3310194455, 311.0), (558927484, 308.0), (2073463781, 310.0), (475334782, 313.8), (3888227373, 314.6), (3369996145, 313.4), (3218956439, 314.4), (1532006175, 315.8), (1330285852, 317.2), (389616120, 317.8), (3390968218, 319.0), (3253077766, 321.2), (1287391673, 321.8), (593961836, 325.0), (494047449, 324.2), (542336057, 323.8), (1751410020, 326.2), (1797426641, 326.4), (307810686, 330.0), (5087072737, 330.0), (1478463697, 332.4), (3892471097, 335.6), (1671859263, 331.2), (1393845291, 334.2), (3966668353, 335.8), (564759479, 335.8), (1817022955, 337.2), (303468286, 339.2), (1563116398, 342.0), (1831144369, 343.0), (420483587, 345.8), (575310143, 347.8), (1493270621, 345.2), (323555274, 348.4), (1389511892, 352.2), (1696122133, 350.0), (1536943003, 351.0), (1393822144, 353.0), (5132914646, 352.6), (350588807, 354.0), (1765577193, 355.2), (300353760, 357.0), (2143751792, 359.6), (343607190, 361.0), (1856979484, 360.8), (504038487, 362.6), (297370127, 362.4), (352717376, 365.8), (3301673148, 368.6), (376769705, 366.4), (1481085091, 368.8), (3301673289, 367.8), (1522897396, 369.2), (571934384, 373.2), (1655343201, 374.0), (1487704081, 373.8), (1817560357, 372.6), (1516767619, 373.8), (545755259, 376.0), (298846501, 377.0), (3922366759, 378.0), (309205300, 380.2), (2066531560, 379.0), (492243636, 381.0), (285229702, 381.6), (2074354806, 382.4), (367267317, 384.4), (488508707, 387.6), (433360852, 385.0), (1676513467, 385.0), (1815449954, 387.6), (84081047, 388.4), (613910476, 390.2), (32804507, 390.4), (39883207, 389.8), (342526455, 396.8), (4983164976, 391.8), (321127201, 396.0), (3331527036, 397.2), (1676611540, 398.8), (331067537, 396.2), (3406368267, 399.8), (409342108, 399.6), (1687167598, 403.2), (3860990257, 402.6), (399779110, 405.2), (450261142, 405.8), (1680542842, 405.2), (1896025111, 408.0), (1349161131, 409.0), (1687686913, 408.2), (104731065, 413.4), (370053139, 412.2), (390531619, 412.8), (3976127340, 413.4), (3300756344, 415.4), (336498908, 414.8), (606209560, 415.2), (263751312, 418.0), (1639877577, 419.6), (1507789396, 422.0), (528975449, 421.2), (96211036, 422.8)]
        # res_degree = [(2002782614, 1.2), (1640194509, 2.8), (1658025046, 3.0), (3932392677, 4.6), (3889406996, 5.8), (2017789612, 6.6), (3860990257, 10.4), (72116592, 10.8), (566354903, 14.4), (1661407643, 20.0), (80839177, 18.8), (1373560380, 23.6), (5082227371, 25.0), (2134844372, 26.0), (3905806700, 29.6), (297370127, 31.4), (15926812, 34.6), (452856892, 36.2), (3272794780, 40.6), (398101325, 36.0), (3268306177, 40.8), (1936975107, 43.2), (3962146439, 40.6), (2023000603, 47.2), (3333980594, 46.6), (2133664226, 45.2), (3896673152, 49.6), (3231638698, 50.8), (1560544443, 50.0), (1751410020, 53.8), (419443108, 50.2), (285229702, 57.6), (321127201, 58.6), (360571765, 58.2), (3288818819, 65.2), (3813434692, 61.0), (1332447893, 71.4), (1491962758, 69.2), (1688171411, 66.8), (406374623, 71.0), (3328747791, 72.8), (3375661684, 75.8), (2074510271, 83.6), (1727054807, 80.8), (1675052146, 82.2), (4878763239, 83.8), (262637433, 93.4), (3920136941, 93.6), (3895233677, 87.2), (509906071, 88.2), (4977043658, 89.2), (545464623, 94.6), (3682701648, 94.4), (1687531878, 96.0), (3295289914, 97.0), (1494541349, 99.2), (567878804, 103.6), (470123745, 109.6), (5127669150, 105.0), (327616422, 106.0), (3217590394, 113.2), (2073463781, 107.0), (1784319047, 117.8), (1699057087, 110.6), (1515624502, 112.8), (3242690639, 117.2), (1578179664, 116.2), (1517450325, 122.6), (2121140595, 123.8), (1461907859, 124.4), (1380790686, 129.2), (1975829085, 130.6), (334979716, 134.0), (1846649498, 138.6), (3828499172, 131.0), (1563116398, 136.0), (268534714, 140.4), (606725181, 140.2), (3370247268, 144.6), (3973440629, 144.6), (1551893639, 143.2), (1394689200, 146.2), (3314566325, 145.0), (3304228044, 146.4), (1927972197, 149.8), (101090827, 151.4), (575310143, 152.0), (1722354175, 153.0), (2099679646, 154.0), (582821509, 153.4), (1977987160, 155.8), (2051446883, 156.6), (3879110949, 160.8), (436357429, 156.2), (3265810751, 161.0), (564169057, 160.4), (376861037, 159.0), (558023041, 170.0), (1814405522, 169.0), (426920378, 170.0), (272253388, 165.8), (295191058, 166.0), (1856979484, 171.8), (1699816014, 168.0), (2095694494, 176.2), (1731715799, 181.0), (1576444635, 177.6), (3227173623, 173.6), (2061976346, 174.0), (1876108074, 184.4), (3253715763, 175.2), (1812931407, 184.4), (593961836, 188.6), (287597432, 190.0), (44344292, 186.4), (1752810480, 190.6), (1840407572, 189.6), (5131625497, 190.6), (283821097, 189.8), (3888227373, 195.8), (5159052335, 199.0), (1925899334, 200.0), (1307182197, 197.6), (3940746433, 202.0), (1456137446, 200.6), (1539015950, 204.4), (1599456560, 209.8), (1502545209, 205.6), (3073355, 213.0), (1633781172, 210.0), (1673889429, 209.2), (571934384, 209.8), (1680541393, 216.4), (37127901, 215.6), (3316156150, 219.0), (3328968612, 220.4), (275515528, 221.6), (256215255, 221.2), (3301673289, 226.0), (3358099889, 224.0), (51055048, 226.2), (55511497, 228.6), (1610156673, 224.4), (324143839, 228.4), (1306790734, 233.8), (5061872536, 234.8), (1875741769, 231.6), (1680542842, 236.6), (2067795122, 237.8), (500141353, 243.2), (1778060633, 236.6), (45911386, 239.4), (131468705, 240.8), (5202546236, 243.8), (257822273, 250.2), (612667041, 247.8), (2063339204, 249.4), (323555274, 252.0), (249892889, 249.0), (1768820773, 256.0), (3724087384, 250.6), (1493270621, 260.0), (248498271, 251.0), (331067537, 256.0), (3218956439, 255.4), (252479648, 260.6), (3233355996, 260.8), (1362039058, 259.8), (1481339166, 262.2), (1313687876, 263.4), (1766779236, 264.6), (591047033, 264.2), (362461576, 267.8), (3298109838, 273.8), (385114522, 271.2), (1380114865, 272.0), (323355097, 267.8), (1368834543, 271.2), (318464617, 280.0), (257401460, 282.4), (530276988, 275.6), (1620009639, 280.6), (1827340972, 284.2), (1753555716, 285.0), (310084368, 280.4), (1926464352, 277.2), (1829757820, 279.0), (1443570559, 284.2), (1422336966, 286.4), (1692541903, 284.6), (3276530681, 286.6), (564446265, 288.4), (2003895361, 290.2), (110863629, 291.4), (551355683, 291.6), (399779110, 293.6), (1364010285, 293.6), (532530515, 296.6), (276792859, 295.2), (3955000927, 297.2), (1307084518, 301.0), (440829705, 298.0), (3345745674, 297.2), (1869907828, 299.8), (339740548, 307.4), (3683223618, 306.6), (1509591116, 299.6), (3238529124, 305.8), (468912431, 309.2), (445286761, 310.8), (1385040340, 307.8), (588351979, 312.0), (3927968245, 309.6), (1365772823, 314.8), (3533048396, 313.0), (478579502, 317.4), (277875532, 321.2), (1334414178, 319.0), (532089776, 318.8), (1639877577, 319.6), (414452827, 322.4), (5135535206, 321.0), (3249867933, 324.2), (1949994149, 327.6), (3217231091, 325.0), (1456409882, 326.8), (4917956062, 325.2), (529731071, 328.6), (3966668353, 332.0), (1354862155, 329.2), (455675542, 335.0), (17436383, 334.8), (370380512, 337.4), (3717336811, 339.6), (1687686913, 343.2), (528879389, 342.6), (286363515, 344.0), (3934392264, 345.2), (5132914646, 345.2), (1455919068, 349.2), (1838157815, 349.2), (1816039602, 350.4), (116297933, 352.4), (1512378622, 360.2), (3336081767, 358.4), (59576688, 357.0), (1817022955, 356.6), (1483996934, 355.4), (3328390717, 356.8), (1296031840, 359.2), (1861322963, 361.0), (3626502362, 358.2), (1619454232, 360.8), (1298178340, 367.0), (4991705418, 363.2), (2015717757, 362.8), (507652479, 364.2), (307810686, 366.6), (3574600080, 368.6), (84081047, 366.0), (341088688, 366.6), (1748709813, 369.8), (1546912369, 374.8), (3241312886, 372.2), (532562597, 376.0), (1570734759, 374.0), (1499005608, 373.6), (1614078682, 379.6), (537993959, 373.2), (1738965797, 376.8), (1703273271, 375.6), (4924154685, 376.0), (108872542, 380.6), (3976127340, 378.8), (1421345676, 385.0), (354862007, 380.6), (1483195350, 383.8), (3357696987, 387.0), (390022131, 387.2), (5050246170, 385.8), (315704361, 383.0), (542336057, 388.6), (1374159944, 383.2), (336020572, 389.8), (1505346672, 391.2), (104481913, 386.8), (3238085771, 388.2), (2116256909, 387.0), (1719501965, 391.4), (249619607, 391.4), (1906697410, 395.2), (1817543889, 394.8), (2091541753, 395.2), (3388728598, 398.2), (1365615894, 399.0), (1883874611, 394.4), (3892471097, 399.0), (3392087354, 401.0), (250168647, 399.4), (2122982727, 399.8)]
        # res_central_p = [(1640194509, 1.0), (3932392677, 2.0), (566354903, 4.2), (2002782614, 5.8), (80839177, 7.0), (2017789612, 7.2), (104481913, 8.8), (398101325, 9.6), (72116592, 11.4), (1491962758, 13.6), (1784319047, 16.6), (509906071, 14.8), (285229702, 19.4), (1661407643, 19.4), (1926464352, 21.2), (1658025046, 23.8), (15926812, 24.4), (3288818819, 27.8), (3328747791, 30.2), (3860990257, 30.6), (3889406996, 32.6), (4878763239, 32.8), (3813434692, 34.0), (567878804, 39.4), (1560544443, 41.4), (545464623, 38.8), (2091541753, 44.6), (3358099889, 44.2), (1727054807, 43.2), (528975449, 46.0), (1768820773, 44.8), (2073463781, 47.2), (452856892, 47.8), (1502545209, 53.4), (2003895361, 53.8), (500141353, 54.6), (2023000603, 54.0), (5082227371, 60.0), (3231638698, 57.8), (1349161131, 59.0), (270536349, 61.0), (334979716, 63.4), (1876108074, 65.4), (2134844372, 61.6), (1699057087, 66.6), (297370127, 69.2), (272253388, 71.0), (295191058, 72.8), (4924154685, 73.2), (4977043658, 77.0), (2104102017, 74.8), (542608961, 74.4), (59576688, 76.4), (1869907828, 76.8), (2063339204, 78.8), (606725181, 81.6), (104731065, 80.8), (2117077632, 82.6), (1751410020, 84.6), (1427443942, 85.6), (3879110949, 88.0), (468912431, 88.4), (321127201, 91.6), (3370247268, 91.8), (1673889429, 92.0), (422185655, 90.0), (1307182197, 94.4), (1456137446, 94.0), (1539015950, 94.6), (324143839, 102.8), (1766779236, 100.0), (406374623, 100.2), (628001706, 102.4), (1676611540, 102.8), (537993959, 104.8), (341088688, 102.4), (2074510271, 106.0), (1927319143, 107.0), (1332447893, 113.8), (3897428558, 113.6), (3407811029, 115.8), (3724087384, 117.0), (323555274, 114.8), (1373560380, 111.2), (1936975107, 116.0), (101090827, 119.2), (1385040340, 120.0), (1443570559, 123.4), (1512378622, 127.0), (283821097, 127.8), (3714911402, 123.2), (256215255, 125.0), (249892889, 124.8), (619187040, 125.8), (539955587, 129.8), (1421345676, 129.4), (306973347, 125.2), (262637433, 131.0), (2113081694, 131.4), (360571765, 131.4), (1738969144, 136.6), (2051446883, 136.0), (629247764, 135.2), (1623199532, 140.4), (455675542, 137.6), (1494541349, 137.0), (1816039602, 138.0), (3328968612, 138.2), (436357429, 140.2), (1680542842, 143.2), (426920378, 143.0), (343607190, 145.8), (3375661684, 147.0), (84081047, 148.6), (1748709813, 150.6), (108872542, 152.6), (3976127340, 151.2), (5050246170, 155.8), (1719501965, 154.4), (1817543889, 156.2), (3892471097, 160.4), (2122982727, 156.0), (3312453204, 156.2), (444401493, 161.4), (1516767619, 162.2), (1465125341, 165.2), (3413608972, 165.4), (3884943933, 164.0), (2112817895, 166.8), (1831144369, 164.0), (1505233894, 166.0), (1731136836, 169.6), (1761742222, 166.8), (3924528694, 170.0), (1840352834, 167.4), (630296184, 167.0), (1470303871, 174.8), (32804507, 176.0), (440242028, 174.2), (1386942346, 175.0), (336498908, 177.2), (409932105, 175.6), (1338020217, 174.0), (250168647, 175.8), (3962146439, 173.6), (1687531878, 180.8), (582821509, 183.6), (419443108, 184.2), (1517450325, 180.6), (593961836, 184.6), (44344292, 184.4), (336020572, 190.2), (1369540724, 186.2), (1927972197, 184.4), (551355683, 192.8), (3217590394, 192.8), (1688171411, 192.2), (3896673152, 192.8), (1778060633, 197.2), (571934384, 194.0), (575310143, 199.4), (1980958790, 196.2), (558023041, 196.0), (414452827, 199.2), (528879389, 198.0), (1752810480, 208.6), (1846649498, 200.4), (588351979, 209.0), (268534714, 205.0), (37127901, 207.2), (3304228044, 209.4), (1906697410, 205.4), (352717376, 205.8), (2002095289, 206.6), (1953992067, 208.8), (3582234226, 209.6), (1494454201, 209.4), (4983164976, 212.6), (309956948, 210.0), (1576444635, 212.8), (287597432, 210.6), (3242690639, 215.8), (1699816014, 215.4), (1633781172, 218.4), (1306790734, 216.2), (131468705, 223.6), (1722354175, 223.4), (1620009639, 222.0), (248498271, 227.0), (3922366759, 226.6), (112593243, 228.0), (107122090, 227.0), (315395676, 230.2), (367134807, 224.8), (532530515, 227.4), (310084368, 230.2), (454070484, 232.0), (1680541393, 233.4), (3888227373, 231.2), (3073355, 228.6), (55511497, 235.4), (1499005608, 232.8), (376861037, 234.0), (3301673289, 237.2), (4991705418, 234.0), (59838285, 239.0), (3272794780, 241.8), (110863629, 236.8), (445286761, 243.2), (1570734759, 238.8), (1394689200, 246.0), (327616422, 250.6), (1563116398, 249.8), (1515624502, 251.4), (1380114865, 253.6), (3333980594, 250.0), (249619607, 254.0), (1409158018, 256.8), (1307084518, 256.4), (5061872536, 254.8), (1960545874, 255.8), (1655343201, 256.2), (120295193, 254.2), (354862007, 258.4), (51055048, 259.8), (257822273, 255.4), (2099679646, 259.2), (3218956439, 260.0), (63114596, 259.2), (1875741769, 261.4), (380110128, 267.2), (1932593894, 265.0), (1675052146, 266.4), (1578179664, 270.0), (3291253841, 266.4), (1483996934, 270.8), (388827964, 272.6), (470123745, 271.4), (1599081286, 272.6), (1481085091, 272.2), (1461907859, 281.6), (1327007787, 276.4), (1334414178, 279.8), (3314566325, 280.8), (389616120, 278.2), (3265810751, 280.6), (1351455035, 281.4), (5127669150, 281.6), (45911386, 284.8), (1289916738, 282.6), (622170132, 283.2), (498864529, 282.6), (1368834543, 285.4), (530276988, 288.0), (98046095, 286.2), (1925899334, 285.6), (2133664226, 288.0), (315704361, 289.4), (478579502, 288.8), (3233355996, 290.4), (1827340972, 293.0), (440829705, 292.8), (1718978486, 294.2), (1365772823, 295.8), (529206562, 295.8), (1387040529, 292.0), (529338597, 293.8), (35523978, 298.4), (1750896211, 296.0), (1827639122, 297.6), (1547178345, 298.8), (1883874611, 296.4), (249564257, 298.2), (1402671383, 298.0), (3268306177, 297.6), (497160623, 300.4), (1455919068, 302.8), (2016677978, 302.4), (1493270621, 305.8), (331067537, 304.8), (252479648, 307.4), (591047033, 310.0), (362461576, 310.8), (323355097, 309.6), (318464617, 313.0), (257401460, 312.6), (564446265, 316.6), (399779110, 317.2), (339740548, 316.2), (1509591116, 321.4), (3533048396, 321.2), (1456409882, 323.8), (1354862155, 325.8), (17436383, 327.4), (1687686913, 325.0), (3934392264, 330.4), (1838157815, 332.4), (297242515, 332.4), (1977987160, 338.0), (2121140595, 337.4)]
        # res_central_h = [(1640194509, 1.0), (3932392677, 2.0), (3889406996, 5.0), (3860990257, 5.4), (5082227371, 6.0), (3962146439, 8.2), (3333980594, 9.0), (3314566325, 9.8), (3905806700, 12.6), (4878763239, 12.8), (3895233677, 14.4), (5127669150, 15.2), (2133664226, 17.2), (3813434692, 18.8), (1357058380, 18.8), (3896673152, 20.0), (3682701648, 21.8), (3828499172, 22.0), (3920136941, 22.8), (4053110557, 23.2), (3683223618, 25.4), (3217590394, 26.4), (5061872536, 27.8), (3231638698, 31.0), (5091134708, 30.8), (1368068229, 32.6), (3304228044, 33.4), (4991705418, 33.6), (3370247268, 35.0), (323555274, 36.8), (2116881497, 38.6), (3288818819, 40.4), (1699057087, 41.0), (61760481, 40.4), (1364010285, 46.2), (1572310621, 46.6), (3307933666, 47.0), (380110128, 48.8), (1932593894, 47.2), (1527825259, 49.0), (1481339166, 50.6), (5132914646, 50.2), (3724087384, 53.0), (1980958790, 52.6), (4917956062, 53.2), (268534714, 56.0), (3978366407, 55.4), (2063339204, 58.2), (528879389, 58.0), (454070484, 57.4), (3922366759, 58.0), (2002782614, 61.2), (2017789612, 61.8), (1658025046, 63.4), (398101325, 65.0), (1560544443, 65.2), (566354903, 66.2), (509906071, 66.6), (2134844372, 68.4), (1936975107, 71.2), (1491962758, 70.2), (1576444635, 71.8), (1900120543, 72.8), (2104102017, 74.2), (542608961, 73.2), (1502545209, 75.2), (1661407643, 79.2), (1875741769, 78.6), (1610156673, 81.0), (1925899334, 86.4), (1374159944, 83.8), (1692541903, 86.0), (1663011206, 86.0), (1827639122, 91.8), (1594134739, 88.2), (1365615894, 89.2), (634753476, 90.6), (1850315257, 92.6), (478579502, 95.8), (298846501, 95.0), (530276988, 96.0), (285229702, 97.8), (1764921396, 98.0), (101090827, 97.8), (297370127, 103.8), (532530515, 103.6), (532562597, 106.0), (3980035446, 108.8), (1814405522, 104.0), (2116256909, 107.4), (3073355, 107.6), (1394689200, 110.8), (1488490350, 112.6), (1738965797, 112.8), (1946881676, 116.4), (1619454232, 117.0), (1750896211, 118.4), (1874760138, 116.8), (496177656, 117.6), (297176433, 119.4), (1752810480, 119.6), (3295289914, 121.8), (1620009639, 120.6), (545464623, 123.2), (3888227373, 127.6), (44344292, 126.4), (4909698968, 126.6), (248498271, 129.0), (426920378, 129.8), (2051446883, 133.0), (3237777162, 131.8), (1977987160, 132.8), (1960545874, 132.8), (1313687876, 134.6), (2134509599, 134.4), (1680541393, 138.0), (1499005608, 139.2), (249892889, 138.4), (588351979, 139.4), (2099679646, 140.2), (1488291553, 142.8), (1563116398, 144.2), (1727054807, 145.0), (1722354175, 148.8), (1876108074, 148.6), (3582234226, 151.2), (4983164976, 148.0), (3241379119, 151.2), (571934384, 152.0), (1456409882, 154.2), (3582756993, 152.2), (1327007787, 154.2), (104481913, 157.2), (337742471, 155.8), (3413608972, 159.0), (2095694494, 158.0), (3291253841, 162.0), (1379733274, 163.8), (510495006, 162.4), (549654401, 165.6), (122360027, 164.2), (1766779236, 165.0), (370380512, 168.0), (31166634, 170.2), (424808273, 172.0), (3369996145, 172.4), (2117077632, 171.8), (1846649498, 173.6), (277875532, 177.8), (1349161131, 180.0), (436357429, 179.2), (1307182197, 182.4), (256215255, 182.8), (3312453204, 183.8), (3714911402, 178.4), (1635717596, 185.6), (362461576, 186.6), (370642757, 186.6), (406374623, 187.4), (1780092362, 188.8), (1906697410, 187.8), (1953992067, 190.8), (440242028, 190.2), (484740552, 193.2), (257401460, 195.2), (113840280, 195.2), (52597127, 196.8), (1862242460, 195.4), (1883874611, 199.8), (249564257, 199.6), (1402671383, 199.2), (3328747791, 199.4), (422185655, 204.4), (5159052335, 202.0), (1354862155, 205.6), (275515528, 207.6), (498864529, 209.2), (612667041, 206.2), (125046326, 206.2), (1831144369, 213.6), (2113081694, 214.2), (282988442, 210.6), (62393074, 217.0), (332531074, 213.6), (539955587, 219.4), (1386942346, 214.2), (108872542, 219.6), (1421345676, 220.0), (306973347, 222.0), (1505233894, 220.2), (110863629, 218.6), (270536349, 223.8), (3892471097, 221.4), (283821097, 225.6), (3626502362, 227.0), (1817022955, 230.2), (84871015, 229.0), (1963396686, 226.6), (1768950485, 226.0), (1443570559, 234.4), (582682945, 228.4), (448957582, 231.6), (1686573000, 234.4), (3416657567, 235.8), (467537978, 235.8), (339740548, 236.2), (1817543889, 235.4), (1633781172, 238.0), (51055048, 241.4), (1516767619, 240.6), (1869907828, 239.4), (1816039602, 246.2), (70323398, 244.2), (1753555716, 240.6), (1784319047, 248.6), (482772820, 245.0), (1393822144, 251.4), (4924154685, 248.0), (1456137446, 255.2), (1912210902, 252.2), (399779110, 254.2), (619187040, 250.2), (1512378622, 256.0), (352717376, 255.6), (2002095289, 256.6), (542336057, 255.8), (1599456560, 256.6), (1455919068, 259.6), (605914994, 259.0), (394038256, 259.8), (3966668353, 262.8), (35523978, 262.8), (3924528694, 264.2), (2122982727, 265.8), (321127201, 268.4), (116297933, 270.0), (273878386, 270.4), (3358099889, 272.8), (1838157815, 276.0), (1422468308, 277.8), (262637433, 276.2), (343607190, 278.0), (1289916738, 277.0), (500141353, 280.0), (550898050, 277.2), (5050246170, 277.0), (84081047, 277.2), (1365772823, 279.2), (1387040529, 283.0), (1673889429, 284.8), (1332907910, 281.8), (336498908, 286.0), (558023041, 287.4), (3300626533, 289.0), (1784648160, 286.0), (1713148415, 289.6), (3897428558, 292.0), (3407811029, 289.0), (541559753, 293.2), (131468705, 291.0), (2121140595, 295.4), (507652479, 297.8), (567878804, 297.6), (1738969144, 297.0), (622170132, 302.0), (341088688, 299.6), (630296184, 300.0), (1385040340, 305.2), (440829705, 302.2), (529338597, 302.2), (405080902, 303.6), (1402456485, 305.0), (645157428, 303.6), (3980026941, 304.6), (3328390717, 306.2), (1911808117, 306.6), (1973837951, 308.0), (594792576, 313.8), (1630748869, 317.6), (2084884687, 316.8), (1927684310, 317.8), (404703464, 316.8), (1579876590, 316.4), (1321650427, 321.0), (2138796295, 321.0), (1362039058, 318.4), (1777420594, 320.4), (309205300, 323.4), (564169057, 321.8), (1435128170, 325.4), (1969551723, 327.4), (125145469, 327.6), (2015717757, 327.6), (307810686, 328.6), (3298109838, 329.6), (3574600080, 331.0), (1689799061, 332.4), (385114522, 332.6), (1705044396, 334.4), (1829985424, 342.4)]
        # res_random = [(1751410020, 2.0), (4964749582, 3.2), (484740552, 5.4), (2051446883, 5.8), (1688171411, 6.4), (125046326, 9.6), (4977043658, 8.4), (1435339293, 10.6), (1362039058, 14.6), (1470303871, 15.8), (2099679646, 15.8), (1307084518, 17.4), (370380512, 23.2), (3242690639, 23.0), (1619454232, 23.2), (2142309432, 25.2), (394038256, 26.4), (3828499172, 28.0), (1680541393, 29.8), (1738969144, 30.6), (532530515, 31.2), (1755943043, 33.0), (52597127, 34.8), (1577226507, 32.8), (1539015950, 34.2), (451151784, 39.8), (3352364759, 43.0), (1507789396, 39.8), (1418921380, 41.2), (3220836727, 47.2), (2116256909, 43.0), (45911386, 46.0), (3902344373, 49.0), (1911808117, 51.4), (3226944439, 49.8), (1481339166, 51.4), (113706919, 53.6), (78973666, 51.6), (119933432, 54.2), (529959258, 53.2), (2128384126, 52.0), (3314749813, 62.0), (3625291597, 58.0), (315704361, 58.8), (1456409882, 64.0), (3288818819, 65.0), (306973347, 65.6), (622170132, 70.8), (318464617, 69.6), (1313900437, 67.4), (1443570559, 66.6), (1718978486, 70.6), (1850315257, 75.0), (5061872536, 75.8), (380080040, 71.6), (268534714, 85.4), (414452827, 77.6), (299795953, 79.4), (613910476, 81.6), (354192076, 82.8), (1614078682, 83.8), (3311014404, 80.6), (591047033, 86.4), (1784483994, 88.8), (1592394866, 83.8), (1449206893, 86.2), (2095056909, 86.8), (1817543889, 86.4), (284135863, 94.8), (2067795122, 92.6), (1721405648, 96.8), (3388728598, 98.4), (309205300, 97.4), (646488525, 103.4), (3895233677, 103.0), (1483195350, 102.2), (3237777162, 101.4), (571934384, 102.4), (3328968612, 101.6), (1330351710, 109.8), (563284028, 110.2), (3296989583, 106.6), (3218836570, 107.6), (367267317, 108.6), (3582756993, 117.2), (1717027283, 114.0), (539955587, 117.8), (3579545000, 116.8), (309956948, 119.0), (3392087354, 117.6), (3283095330, 120.6), (117181667, 121.8), (3978366407, 122.6), (442894514, 122.6), (423299197, 123.8), (3312783759, 119.8), (2017789612, 125.4), (1422336966, 127.6), (3579840020, 128.2), (449122372, 128.2), (1563116398, 128.4), (432546871, 132.0), (1969551723, 131.6), (1812336239, 137.6), (3947782532, 133.8), (3962802159, 135.8), (1960545874, 137.2), (71373064, 137.8), (1491798848, 140.8), (500141353, 137.4), (1640194509, 140.4), (1330285852, 144.2), (1761742222, 145.4), (2002782614, 144.6), (3897428558, 148.6), (1752810480, 150.2), (1410731121, 148.6), (4053110557, 153.4), (325775803, 147.8), (3877332273, 149.8), (1781457407, 150.4), (439469233, 157.4), (1681557482, 153.2), (1384320567, 156.2), (3271344796, 157.4), (1402456485, 158.4), (2117077632, 162.8), (496144385, 160.4), (1534430026, 165.0), (1410895915, 163.4), (3300626533, 165.8), (334236858, 167.8), (549654401, 171.4), (392039767, 169.2), (375884917, 168.8), (3218956439, 172.2), (1768820773, 175.4), (63114596, 171.4), (1415187672, 173.2), (455216472, 178.4), (2122982727, 178.2), (3582234226, 177.8), (15926812, 179.4), (310084368, 181.4), (1385040340, 185.2), (3284012997, 182.4), (2125040961, 190.4), (419202657, 184.8), (305728495, 186.2), (376769705, 184.4), (334979716, 188.8), (1675052146, 190.6), (2028364948, 193.2), (1320371148, 190.8), (418353115, 191.0), (3375661684, 195.6), (1780092362, 191.8), (116624017, 199.2), (1713148415, 195.2), (1753555716, 202.0), (1748709813, 199.4), (1350010243, 200.0), (381391312, 201.2), (3328390717, 203.8), (3934392264, 207.4), (4882041160, 205.8), (1402671383, 204.4), (3276530681, 202.8), (389616120, 208.6), (1856979484, 206.4), (1357058380, 213.4), (399779110, 210.8), (1676611540, 214.8), (273878386, 214.0), (2017560998, 213.8), (3813434692, 215.8), (1572310621, 212.0), (433360852, 213.8), (1797426641, 217.4), (3714911402, 214.4), (3336081767, 218.2), (4887088111, 225.2), (1936975107, 220.2), (1541050096, 222.4), (367134807, 224.6), (1505233894, 226.0), (334333505, 223.4), (1875741769, 224.6), (568004625, 229.0), (1456137446, 230.0), (295209473, 232.8), (452856892, 234.6), (112593243, 232.0), (1794876698, 241.8), (629247764, 235.2), (537993959, 241.8), (1454968844, 239.4), (1665305048, 239.8), (517825720, 239.6), (286363515, 244.6), (1388187425, 244.8), (324143839, 244.0), (646417964, 247.6), (55511497, 245.8), (133861552, 250.0), (283821097, 244.8), (3311669699, 254.8), (31166634, 247.4), (120295193, 250.0), (568960251, 249.6), (3262942873, 256.2), (295045357, 256.0), (1509591116, 257.0), (1875715174, 254.4), (4892233279, 256.8), (505974743, 261.6), (1727054807, 258.6), (558023041, 261.0), (1655343201, 263.2), (1394689200, 267.0), (1368068229, 268.4), (480513442, 267.4), (3905806700, 265.6), (107941779, 272.0), (1488490350, 269.6), (585175006, 268.0), (528879389, 272.0), (1380114865, 272.2), (275515528, 270.0), (1512378622, 277.0), (541887358, 275.6), (619187040, 276.6), (1651413412, 281.4), (1290178260, 279.2), (257401460, 280.4), (380110128, 281.0), (4983164976, 280.2), (1337910401, 278.2), (1605569793, 282.0), (3328747791, 279.4), (532562597, 280.6), (248645187, 287.0), (1579876590, 288.8), (1296031840, 290.0), (1943536874, 288.6), (1633781172, 289.2), (1787496994, 291.2), (1927319143, 295.0), (1560544443, 292.6), (3249867933, 293.0), (1874760138, 297.0), (541559753, 296.8), (1699942663, 292.0), (1854214171, 298.8), (566354903, 306.2), (3421832322, 302.2), (305467801, 302.8), (72116592, 304.0), (22645864, 308.2), (299927928, 307.8), (1393822144, 303.4), (385387181, 309.6), (1428964175, 313.8), (1980958790, 311.0), (1750075030, 314.4), (3223226528, 314.8), (248580359, 317.0), (3411972131, 318.2), (5115645065, 318.2), (3298109838, 320.6), (1927684310, 319.6), (70323398, 321.0), (249892889, 324.4), (636424552, 323.4), (1573916545, 319.4), (494307803, 328.0), (1354862155, 327.6), (441159871, 325.0), (3626502362, 325.6), (59838285, 329.6), (1386942346, 330.4), (1435128170, 333.4), (1583550666, 334.0), (3966668353, 332.8), (2134509599, 335.4), (446893953, 338.4), (3260584189, 339.4), (346393753, 339.4), (248498271, 334.4), (1527825259, 340.8), (1491962758, 341.6), (1608028653, 341.2), (3533048396, 339.8), (472519091, 349.8), (5120758072, 346.8), (1973837951, 345.2), (1687531878, 345.0), (3955000927, 348.8), (1662226742, 353.2), (1364010285, 352.2)]

        for name, res in zip(legend, [res_greedy, res_degree, res_central_p, res_central_h, res_random]):
            # print(name, res)
            graph_data.append({
                'name': name,
                'type': 'line',
                'data': [item[1] for item in res]
            })
        return {
            "x_axis_name": "Seed Set Size",
            "x_axis_label": x_axis_label,
            "y_axis_name": "Active Set Size",
            "legend": legend,
            "graph_data": graph_data,
            "title": title,
        }


if __name__ == "__main__":
    G = ComplexNetwork()
    # print(G.get_node_distribution())
    # print(G.get_network_params())

    G.get_community_by_spectral_partition(5)

    # G.generate_community_evaluation()
    # G.get_influence_comparison_data('weighted')
    # g = community.girvan_newman(G.network)
    # print(len(next(g)))
    #
    # g2 = community.greedy_modularity_communities(G.network, cutoff=325, best_n=325)
    # print(len(g2))

    # g3 = G.get_community_by_spectral_partition(2)
    # print(len(g3))

    # res1 = G.greedy_ic(30, epochs=1)
    # res2 = G.heuristic_ic(30, heuristic=3)
    # res3 = G.heuristic_ic(4, heuristic=3, case=1)
    # print(res1)
    # print(res2)
    # print(res3)

    # r = G.get_influence_comparison_data('unweighted')
    # print(r)
